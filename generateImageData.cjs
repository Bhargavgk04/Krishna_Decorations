const fs = require('fs');
const path = require('path');

const imagesDir = path.join(__dirname, 'public', 'images');
const outputFile = path.join(__dirname, 'src', 'utils', 'imageData.ts');

function getImagesFromFolder(folder, category) {
  const files = fs.readdirSync(folder);
  return files
    .filter(file => /\.(jpe?g|png|webp|gif)$/i.test(file))
    .map(file => ({
      src: `/images/${category}/${file}`,
      alt: file.replace(/\.[^/.]+$/, ''),
      category,
      description: `${file} from ${category}`
    }));
}

const categories = fs.readdirSync(imagesDir).filter(f => fs.statSync(path.join(imagesDir, f)).isDirectory());

let allImages = [];
let categoryBlocks = [];

for (const category of categories) {
  const folderPath = path.join(imagesDir, category);
  const images = getImagesFromFolder(folderPath, category);
  allImages = allImages.concat(images);

  categoryBlocks.push(
    `export const ${category.replace(/ /g, '')}Images: ImageData[] = ${JSON.stringify(images, null, 2)};`
  );
}

const fileContent = `// Auto-generated by generateImageData.js
export interface ImageData {
  src: string;
  alt: string;
  category: string;
  description?: string;
}

${categoryBlocks.join('\n\n')}

export const portfolioImages: ImageData[] = [
  ${categories.map(c => `...${c.replace(/ /g, '')}Images`).join(',\n  ')}
];
`;

fs.writeFileSync(outputFile, fileContent, 'utf8');
console.log('imageData.ts has been generated!'); 